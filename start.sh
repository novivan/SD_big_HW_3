#!/bin/bash

echo "Starting the application..."

# –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –æ–±—â–∏–µ –º–æ–¥–µ–ª–∏
cd ./Common_Models && mvn clean install
echo "Common Models built successfully."
cd ..

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
run_tests_and_show_results() {
    local module=$1
    echo "=========================================="
    echo "üß™ Running tests for ${module}..."
    echo "=========================================="
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–∞—Ç–∞–ª–æ–≥ –º–æ–¥—É–ª—è
    cd ./${module}
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    mvn clean test
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
    TEST_STATUS=$?
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç JaCoCo –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–æ–≤
    mvn jacoco:report
    
    echo ""
    echo "--- Test Summary for ${module} ---"
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤, –æ—à–∏–±–æ–∫ –∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    TOTAL_TESTS=$(find target/surefire-reports -name "TEST-*.xml" -exec grep -l "<testsuite" {} \; | xargs grep -l "tests=" | xargs cat | grep -o 'tests="[0-9]*"' | cut -d'"' -f2 | awk '{sum += $1} END {print sum}')
    ERRORS=$(find target/surefire-reports -name "TEST-*.xml" -exec grep -l "<testsuite" {} \; | xargs grep -l "errors=" | xargs cat | grep -o 'errors="[0-9]*"' | cut -d'"' -f2 | awk '{sum += $1} END {print sum}')
    FAILURES=$(find target/surefire-reports -name "TEST-*.xml" -exec grep -l "<testsuite" {} \; | xargs grep -l "failures=" | xargs cat | grep -o 'failures="[0-9]*"' | cut -d'"' -f2 | awk '{sum += $1} END {print sum}')
    
    echo "Total tests: ${TOTAL_TESTS}"
    echo "Errors: ${ERRORS}"
    echo "Failures: ${FAILURES}"
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–º–µ–Ω–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã–µ –∏–º–µ—é—Ç—Å—è
    if [ "$ERRORS" -gt 0 ] || [ "$FAILURES" -gt 0 ]; then
        echo ""
        echo "Failed tests:"
        grep -l "failures=\"[1-9]" target/surefire-reports/TEST-*.xml | while read file; do
            TEST_CLASS=$(echo "$file" | sed -n 's/.*TEST-\(.*\)\.xml/\1/p')
            echo "- $TEST_CLASS"
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
            cat "$file" | grep -o '<testcase.*>.*</testcase>' | grep -E 'failure|error' | sed -n 's/.*name="\([^"]*\)".*/  ‚Ä¢ \1/p'
        done
        
        echo ""
        echo "Common error details from surefire-reports:"
        grep -r "Caused by:" target/surefire-reports/*.txt | head -5
    fi
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç JaCoCo –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    REPORT_PATH="$(pwd)/target/site/jacoco/index.html"
    if [ -f "$REPORT_PATH" ]; then
        echo "Opening JaCoCo report in browser: $REPORT_PATH"
        open "$REPORT_PATH"  # –¥–ª—è macOS
        # –¥–ª—è Linux –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: xdg-open "$REPORT_PATH"
        # –¥–ª—è Windows –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: start "" "$REPORT_PATH"
    else
        echo "JaCoCo report not found at: $REPORT_PATH"
    fi
    
    echo ""
    echo "JaCoCo report generated: target/site/jacoco/index.html"
    echo "=========================================="
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–∞—Ç–∞–ª–æ–≥
    cd ..
    
    return $TEST_STATUS
}

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
run_tests_and_show_results "API_Gateway"
run_tests_and_show_results "Orders_Microservice"
run_tests_and_show_results "Payments_Microservice"

echo "All tests completed. JaCoCo reports generated."

echo "Do you want to start the application anyway? (y/n)"
read -r answer
if [[ "$answer" != "y" && "$answer" != "Y" ]]; then
    echo "Application start cancelled."
    exit 0
fi

# –ó–∞–ø—É—Å–∫ RabbitMQ –∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
echo "Starting RabbitMQ..."
if brew services info rabbitmq | grep "running" > /dev/null; then
    echo "RabbitMQ is already running."
else
    brew services start rabbitmq
    sleep 5
    echo "RabbitMQ started successfully."
fi

cd ./API_Gateway && mvn clean package -DskipTests
nohup mvn exec:java -Dexec.mainClass="com.example.App" > /dev/null 2>&1 &
cd ..
echo "API_Gateway started successfully."

cd ./Orders_Microservice && mvn clean package -DskipTests
nohup mvn exec:java -Dexec.mainClass="com.example.App" > /dev/null 2>&1 &
cd ..
echo "Orders Microservice started successfully."

cd ./Payments_Microservice && mvn clean package -DskipTests
nohup mvn exec:java -Dexec.mainClass="com.example.App" > /dev/null 2>&1 &
cd ..
echo "Payments Microservice started successfully."

echo "All services are now running!"